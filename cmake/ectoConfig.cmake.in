# ==============================================================================
#  The ecto CMake configuration file
#
#             ** File generated automatically, do not modify **
#
#  Usage from an external project:
#    In your CMakeLists.txt, add these lines:
#
#    find_package(ecto REQUIRED)
#    ectomodule(mymodule src/module.cpp)
#    ecto_link(mymodule ${MY_LIB_DEPS})
#
#    This file will define the following variables:
#      - ecto_LIBRARIES                 : The list of libraries to link against.
#      - ecto_INCLUDE_DIRS              : The ecto include directories
#    These macros:
#      set_ecto_install_package_name(package_name) #default is ""
#	   ectomodule(module_name ${srcs})
#	   link_ecto(module_name ${libs})
#	   install_ecto_module(module_name)
#
# ==============================================================================
find_package(Boost COMPONENTS
 python
 REQUIRED
)

find_package(PythonLibs REQUIRED)

# ==============================================================================

macro(ectomodule NAME)
add_library(${NAME}_ectomodule SHARED
  ${ARGN}
  )

set_target_properties(${NAME}_ectomodule
  PROPERTIES
  OUTPUT_NAME ${NAME}
  PREFIX ""
  )

target_link_libraries(${NAME}_ectomodule
  ${Boost_LIBRARIES}
  ${PYTHON_LIBRARIES}
  @ecto_LIBRARIES@
)
endmacro()

# ==============================================================================

macro(ectorosmodule NAME)
rosbuild_add_library(${NAME}_ectomodule 
  ${ARGN}
  )

set_target_properties(${NAME}_ectomodule
  PROPERTIES
  OUTPUT_NAME ${NAME}
  PREFIX ""
  )

rosbuild_add_boost_directories()

target_link_libraries(${NAME}_ectomodule
  ${Boost_LIBRARIES}
  ${PYTHON_LIBRARIES}
  ecto
)
endmacro()

# ==============================================================================

macro(link_ecto NAME)
target_link_libraries(${NAME}_ectomodule
 ${ARGN}
)
endmacro()

set(ecto_INCLUDE_DIRS @ecto_INCLUDE_DIRS@)
set(ecto_LIBRARIES @ecto_LIBRARIES@)
INCLUDE_DIRECTORIES(${ecto_INCLUDE_DIRS} 
  ${PYTHON_INCLUDE_PATH}
  ${Boost_INCLUDE_DIRS}
)
link_directories(@ecto_LIBRARIES_DIR@)
set(ecto_PYTHONPATH_ @ecto_PYTHONPATH@ )
foreach(p ${ecto_PYTHONPATH_})
    if(ecto_PYTHONPATH)
        set(ecto_PYTHONPATH "${ecto_PYTHONPATH}:${p}")
    else()
        set(ecto_PYTHONPATH "${p}")
    endif()
endforeach()
set(ecto_user_PYTHONPATH ${CMAKE_BINARY_DIR})
configure_file(@ECTO_CONFIG_PATH@/python_path.sh.user.in 
  ${CMAKE_BINARY_DIR}/python_path.sh
  )
  

#detect the python version and install directories
find_package(PythonInterp REQUIRED)

execute_process(COMMAND ${PYTHON_EXECUTABLE} --version
          ERROR_VARIABLE PYTHON_VERSION_FULL
          OUTPUT_STRIP_TRAILING_WHITESPACE)
          
string(REGEX MATCH "[0-9].[0-9]" PYTHON_VERSION_MAJOR_MINOR "${PYTHON_VERSION_FULL}")

if(UNIX)
    if(APPLE)
        set(PYTHON_PACKAGES_PATH lib/python${PYTHON_VERSION_MAJOR_MINOR}/site-packages CACHE PATH "Where to install the python packages.")
    else() #debian based assumed, install to the dist-packages.
        set(PYTHON_PACKAGES_PATH lib/python${PYTHON_VERSION_MAJOR_MINOR}/dist-packages CACHE PATH "Where to install the python packages.")
    endif()
elseif(WIN32)
    get_filename_component(PYTHON_PATH "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Python\\PythonCore\\${PYTHON_VERSION_MAJOR_MINOR}\\InstallPath]" ABSOLUTE CACHE)
    set(PYTHON_PACKAGES_PATH "${PYTHON_PATH}/Lib/site-packages" CACHE PATH "Where to install the python packages.")
endif()

set(ecto_module_PYTHON_INSTALL ${PYTHON_PACKAGES_PATH} CACHE PATH "The path where modules will be installed." )

#this is where usermodules may be installed to
macro(set_ecto_install_package_name package_name)
  set(ecto_module_PYTHON_INSTALL ${PYTHON_PACKAGES_PATH}/${package_name})
endmacro()

macro( install_ecto_module name)
#this is the python extension
install(TARGETS ${name}_ectomodule
  LIBRARY DESTINATION ${ecto_module_PYTHON_INSTALL} COMPONENT main
  )
endmacro()


message(STATUS "ecto === Source the python_path.sh in your build folder to setup your python path.")
  
